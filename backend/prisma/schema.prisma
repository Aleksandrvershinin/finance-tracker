// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"] // Добавь debian платформу
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum TransactionType {
  INCOME
  EXPENSE
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String
  password  String
  role      Role      @default(USER)
  accounts  Account[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Currency {
  id        Int       @id @default(autoincrement())
  code      String    @unique
  name      String
  symbol    String    @default("")
  Account   Account[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Account {
  id                   Int           @id @default(autoincrement())
  name                 String        @unique
  userId               Int
  user                 User          @relation(fields: [userId], references: [id])
  currencyId           Int
  currency             Currency      @relation(fields: [currencyId], references: [id])
  balance              Float         @default(0)
  initialBalance       Float         @default(0)
  transactions         Transaction[]
  transfersFromAccount Transfer[]    @relation("FromAccount")
  transfersToAccount   Transfer[]    @relation("ToAccount")
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
}

model Category {
  id           Int             @id @default(autoincrement())
  name         String
  type         TransactionType // income | expense
  transactions Transaction[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model Transaction {
  id         Int             @id @default(autoincrement())
  accountId  Int
  account    Account         @relation(fields: [accountId], references: [id])
  categoryId Int
  category   Category        @relation(fields: [categoryId], references: [id])
  amount     Float
  date       DateTime
  type       TransactionType
  comment    String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model Transfer {
  id            Int      @id @default(autoincrement())
  fromAccountId Int
  fromAccount   Account  @relation("FromAccount", fields: [fromAccountId], references: [id])
  toAccountId   Int
  toAccount     Account  @relation("ToAccount", fields: [toAccountId], references: [id])
  amount        Float
  comment       String?
  date          DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
